stages:
  - validate
  - generate
  - build
  - test
  - package

variables:
  NODE_VERSION: "20"
  CACHE_KEY: "${CI_COMMIT_REF_SLUG}-yarn-cache"
  YARN_CACHE_FOLDER: ".yarn/cache"

# Default template for all Node.js jobs
.node_template: &node_template
  image: node:${NODE_VERSION}-alpine
  cache:
    key: $CACHE_KEY
    paths:
      - .yarn/cache/
      - node_modules/
    policy: pull-push
  before_script:
    - apk add --no-cache git
    - corepack enable
    - corepack prepare yarn@4.0.2 --activate
    - yarn install --immutable --check-cache

# Validation stage
lint:
  <<: *node_template
  stage: validate
  script:
    - yarn lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  allow_failure: false

type_check:
  <<: *node_template
  stage: validate
  script:
    - yarn type-check
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  allow_failure: false

security_scan:
  <<: *node_template
  stage: validate
  script:
    - yarn npm audit --all --recursive --environment production
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Generation stage - Generate SDK and documentation
generate_sdk:
  <<: *node_template
  stage: generate
  script:
    - echo "Generating complete SDK..."
    - yarn generate:sdk
    - echo "Verifying generated SDK structure..."
    - test -d src/core || (echo "Missing src/core directory" && exit 1)
    - test -d src/plugins || (echo "Missing src/plugins directory" && exit 1)
    - test -f src/index.ts || (echo "Missing src/index.ts" && exit 1)
    - test -f src/http-client.ts || (echo "Missing src/http-client.ts" && exit 1)
    - test -f src/keygen.ts || (echo "Missing src/keygen.ts" && exit 1)
    - test -f src/types.ts || (echo "Missing src/types.ts" && exit 1)
    - test -f src/build-config.json || (echo "Missing src/build-config.json" && exit 1)
    - echo "SDK generation completed successfully"
  artifacts:
    paths:
      - src/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

generate_docs:
  <<: *node_template
  stage: generate
  script:
    - echo "Generating documentation..."
    - yarn generate:docs:core
    - yarn generate:docs:plugin
    - yarn generate:docs:typescript
    - echo "Verifying generated documentation..."
    - test -f docs/CORE.md || (echo "Missing docs/CORE.md" && exit 1)
    - test -f docs/PLUGINS.md || (echo "Missing docs/PLUGINS.md" && exit 1)
    - test -f typescript/README.md || (echo "Missing typescript/README.md" && exit 1)
    - echo "Documentation generation completed successfully"
  artifacts:
    paths:
      - docs/
      - typescript/README.md
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

generate_postman:
  <<: *node_template
  stage: generate
  script:
    - echo "Generating Postman collections..."
    - yarn generate:postman:core
    - yarn generate:postman:plugin
    - echo "Verifying generated Postman collections..."
    - test -f postman/OPNsense_Core_Modules_API_Collection.postman_collection.json || (echo "Missing core Postman collection" && exit 1)
    - test -f postman/OPNsense_Plugin_Modules_API_Collection.postman_collection.json || (echo "Missing plugin Postman collection" && exit 1)
    - echo "Postman collection generation completed successfully"
  artifacts:
    paths:
      - postman/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Build stage
build:
  <<: *node_template
  stage: build
  dependencies:
    - generate_sdk
  script:
    - echo "Building SDK..."
    - yarn build
    - ls -la dist/
    - echo "Verifying build outputs..."
    - test -f dist/index.js || (echo "Missing dist/index.js" && exit 1)
    - test -f dist/index.cjs || (echo "Missing dist/index.cjs" && exit 1)
    - test -f dist/index.d.ts || (echo "Missing dist/index.d.ts" && exit 1)
    - test -f dist/keygen.js || (echo "Missing dist/keygen.js" && exit 1)
    - test -f dist/keygen.cjs || (echo "Missing dist/keygen.cjs" && exit 1)
    - test -f dist/keygen.d.ts || (echo "Missing dist/keygen.d.ts" && exit 1)
    - echo "Build completed successfully"
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  after_script:
    - |
      echo "Build artifacts:"
      find dist -type f -exec ls -lh {} \;
      echo "Total dist size: $(du -sh dist | cut -f1)"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Test stage (validation after build)
validate_build_artifacts:
  <<: *node_template
  stage: test
  dependencies:
    - build
  script:
    - |
      echo "Validating build artifacts..."

      # Check required files exist and are not empty
      for file in index.js index.cjs index.d.ts keygen.js keygen.cjs keygen.d.ts; do
        test -f "dist/$file" || (echo "Missing dist/$file" && exit 1)
        test -s "dist/$file" || (echo "dist/$file is empty" && exit 1)
      done

      echo "Build artifacts validated successfully"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

validate_documentation:
  <<: *node_template
  stage: test
  dependencies:
    - generate_docs
  script:
    - |
      echo "Validating generated documentation..."

      # Check documentation files exist and have content
      test -s docs/CORE.md || (echo "docs/CORE.md is empty or missing" && exit 1)
      test -s docs/PLUGINS.md || (echo "docs/PLUGINS.md is empty or missing" && exit 1)
      test -s typescript/README.md || (echo "typescript/README.md is empty or missing" && exit 1)

      # Verify documentation contains expected sections
      grep -q "OPNsense Core Modules API Documentation" docs/CORE.md || (echo "Missing title in CORE.md" && exit 1)
      grep -q "OPNsense Plugin Modules API Documentation" docs/PLUGINS.md || (echo "Missing title in PLUGINS.md" && exit 1)
      grep -q "OPNsense TypeScript API Client - Intermediate Stage Modules" typescript/README.md || (echo "Missing title in typescript README" && exit 1)

      # Check that no "Generated on" timestamps exist
      if grep -r "Generated on" docs/ typescript/README.md; then
        echo "Found unwanted 'Generated on' timestamps in documentation"
        exit 1
      fi

      echo "Documentation validation passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Package validation stage
validate_package:
  <<: *node_template
  stage: package
  dependencies:
    - build
  script:
    - |
      echo "Validating package structure..."

      # Validate package.json exports
      node -e "
        const pkg = require('./package.json');
        const fs = require('fs');
        
        // Check main entry points exist
        if (!fs.existsSync(pkg.main)) {
          throw new Error('Main entry point does not exist: ' + pkg.main);
        }
        if (!fs.existsSync(pkg.module)) {
          throw new Error('Module entry point does not exist: ' + pkg.module);
        }
        if (!fs.existsSync(pkg.types)) {
          throw new Error('Types entry point does not exist: ' + pkg.types);
        }
        
        // Check exports
        Object.entries(pkg.exports || {}).forEach(([key, value]) => {
          if (typeof value === 'object') {
            Object.entries(value).forEach(([format, path]) => {
              if (!fs.existsSync(path)) {
                throw new Error('Export path does not exist: ' + path + ' for ' + key + '.' + format);
              }
            });
          }
        });
        
        console.log('Package structure validation passed');
      "

      # Test package installation simulation
      yarn pack --dry-run

      echo "Package validation completed successfully"
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG

package_tarball:
  <<: *node_template
  stage: package
  dependencies:
    - build
    - generate_docs
    - generate_postman
  script:
    - yarn pack
    - ls -la *.tgz
  artifacts:
    paths:
      - "*.tgz"
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG

# Performance monitoring
bundle_analysis:
  <<: *node_template
  stage: test
  dependencies:
    - build
  script:
    - |
      echo "Analyzing bundle size..."

      # Calculate sizes for all build outputs
      ESM_SIZE=$(stat -f%z dist/index.js 2>/dev/null || stat -c%s dist/index.js)
      CJS_SIZE=$(stat -f%z dist/index.cjs 2>/dev/null || stat -c%s dist/index.cjs)
      DTS_SIZE=$(stat -f%z dist/index.d.ts 2>/dev/null || stat -c%s dist/index.d.ts)
      KEYGEN_ESM_SIZE=$(stat -f%z dist/keygen.js 2>/dev/null || stat -c%s dist/keygen.js)
      KEYGEN_CJS_SIZE=$(stat -f%z dist/keygen.cjs 2>/dev/null || stat -c%s dist/keygen.cjs)
      KEYGEN_DTS_SIZE=$(stat -f%z dist/keygen.d.ts 2>/dev/null || stat -c%s dist/keygen.d.ts)

      echo "Bundle sizes:"
      echo "  Main SDK:"
      echo "    ESM (index.js): ${ESM_SIZE} bytes"
      echo "    CJS (index.cjs): ${CJS_SIZE} bytes"
      echo "    Types (index.d.ts): ${DTS_SIZE} bytes"
      echo "  Keygen Utility:"
      echo "    ESM (keygen.js): ${KEYGEN_ESM_SIZE} bytes"
      echo "    CJS (keygen.cjs): ${KEYGEN_CJS_SIZE} bytes"
      echo "    Types (keygen.d.ts): ${KEYGEN_DTS_SIZE} bytes"

      TOTAL_SIZE=$((ESM_SIZE + CJS_SIZE + DTS_SIZE + KEYGEN_ESM_SIZE + KEYGEN_CJS_SIZE + KEYGEN_DTS_SIZE))
      echo "  Total: ${TOTAL_SIZE} bytes"

      # Warn if main bundles are too large (>2MB for SDK, >500KB for keygen)
      if [ $ESM_SIZE -gt 2097152 ] || [ $CJS_SIZE -gt 2097152 ]; then
        echo "⚠️  Warning: Main SDK bundle size exceeds 2MB"
      fi
      if [ $KEYGEN_ESM_SIZE -gt 512000 ] || [ $KEYGEN_CJS_SIZE -gt 512000 ]; then
        echo "⚠️  Warning: Keygen utility bundle size exceeds 500KB"
      fi

      # Create size report
      cat > bundle-size-report.json << EOF
      {
        "main_sdk": {
          "esm_size": $ESM_SIZE,
          "cjs_size": $CJS_SIZE,
          "types_size": $DTS_SIZE
        },
        "keygen_utility": {
          "esm_size": $KEYGEN_ESM_SIZE,
          "cjs_size": $KEYGEN_CJS_SIZE,
          "types_size": $KEYGEN_DTS_SIZE
        },
        "total_size": $TOTAL_SIZE,
        "commit": "$CI_COMMIT_SHA",
        "ref": "$CI_COMMIT_REF_NAME"
      }
      EOF

      echo "Bundle analysis completed"
  artifacts:
    paths:
      - bundle-size-report.json
    expire_in: 30 days
    reports:
      performance: bundle-size-report.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  allow_failure: true
